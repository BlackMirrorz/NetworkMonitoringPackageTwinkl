#----------------------------------------
# Twinkl Fastlane Pipeline SPM
# Copyright Twinkl Limited 2004
# Created By Josh Robbins (∩｀-´)⊃━☆ﾟ.*･｡ﾟ
#----------------------------------------

# Set Development Platform
default_platform(:ios)

# Create Global Mutable Variables
PROJECT_NAME = 'NetworkMonitoringPackageTwinkl'

#----------------------------------------
# Dependency Installation
# Setup Base Dependencies
#----------------------------------------

# Setup Base Dependencies On Your Machine
desc "☁️  Installs Base Dependencies For Our Devs."
lane :setupBaseDependenciesOnMachine do
  sh "chmod +x ./scripts/twinklIOSConfigurationSPM.sh" # Adjusted path
  sh "./scripts/twinklIOSConfigurationSPM.sh" # Adjusted path
  UI.success("🫠 Base Dependencies Configured.")
end

# Setup Base Dependencies On CI
desc "☁️  Installs Base Dependencies For The CI."
lane :setupBaseDependenciesCI do
  sh "chmod +x ./scripts/twinklIOSConfigurationCI-SPM.sh" # Adjusted path
  sh "./scripts/twinklIOSConfigurationCI-SPM.sh" # Adjusted path
  UI.success("🫠 Base Dependencies Configured.")
end

#----------------
#  Tests
# Runs Unit Tests
#----------------

desc "☁️ Runs Unit Tests"
lane :run_unit_tests do

  didPassUnitTests = twinkl_unit_tests_spm(
    command: "test",
    simulator: "macosx"
  )

  failed_image_url = "https://octodex.github.com/images/original.png"
  passed_image_url = "https://octodex.github.com/images/class-act.png"
  
  image_url = didPassUnitTests ? passed_image_url : failed_image_url
    
  tests_status = didPassUnitTests ?  "🏆 Unit Tests Passed 🏆" : "⚠️ Unit Tests Failed ⚠️"
  message_body =  didPassUnitTests ? " 🛠️ Good Work!" : "🆘 Please Check The Logs!"
  
  project_name = ENV['PROJECT_NAME'] || PROJECT_NAME
   
  post_notification(
    title: "#{project_name} Unit Tests",
    subtitle: tests_status,
    image_url: image_url,
    message_body: message_body
  )
  
  require 'fileutils'
  test_output_directory = "./test_output"
  FileUtils.rm_rf(test_output_directory) if Dir.exist?(test_output_directory)

  if !didPassUnitTests
    UI.user_error!("💩 Tests Failed")
   end
end

#-----------------------------
# Linting & Code Formatting
# Runs SwiftLint & SwiftFormat
#-----------------------------

desc "☁️  Lints & Formats The Current Project"
lane :lint_and_format_project do
   lint_project
   format_project
   UI.success("✅ Code Standardisation Completed 🫠")
end

#---------------
# Linting
# Runs SwiftLint
#---------------

desc "☁️  Lints the current project"
private_lane :lint_project do

 swift_tool_info = twinkl_swift_tool_version_extractor(tool: "lint")
  
 executable_path = swift_tool_info[:swifttool_executable]
 UI.success("🫠 Executable Extrapolated #{executable_path}")
  
 swiftlint(
    mode: :lint,
    executable: executable_path,
    config_file: "fastlane/.swiftlint.yml",
    raise_if_swiftlint_error: true,
    ignore_exit_status: false
 )
  
 UI.success("✅ Linting Project Completed 🫠")
end

#-----------------
# Formatting
# Runs SwiftFormat
#-----------------

desc "Formats the current project"
private_lane :format_project do
 
 swift_tool_info = twinkl_swift_tool_version_extractor(tool: "format")
  
 executable_path = swift_tool_info[:swifttool_executable]
 UI.success("🫠 Executable Extrapolated #{executable_path}")

  swiftformat(
    executable: executable_path,
    swiftversion: "5",
    config: "fastlane/.swiftformat",
    dryrun: true,
    lint: true
  )

  UI.success("✅ Formatting Project Completed 🫠")
end

#---------------------------
# Messaging
#---------------------------

desc "✉️  Post Notification"
private_lane :post_notification do |options|
  twinkl_google_chat_message(
    webhook_url: ENV['CI_WEBHOOK'],
    title: options[:title],
    subtitle: options[:subtitle],
    image_url: options[:image_url],
    message_body: options[:message_body]
  )
end
